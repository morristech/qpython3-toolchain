From 99e639d3531522fff5467fd96162ad2eb4039f09 Mon Sep 17 00:00:00 2001
From: river <riverfor@gmail.com>
Date: Tue, 7 Aug 2018 05:52:06 -0400
Subject: [PATCH 1/2] py27-cross-compile

---
 Include/Python.h      |  5 ++++
 Include/pyport.h      |  3 +++
 Modules/posixmodule.c |  2 +-
 configure.ac          | 73 ++++++++++++++++++++++++++++++++++++++-------------
 4 files changed, 64 insertions(+), 19 deletions(-)

diff --git a/Include/Python.h b/Include/Python.h
index a9327b0..4f5cc4e 100644
--- a/Include/Python.h
+++ b/Include/Python.h
@@ -16,6 +16,11 @@
 #define WITH_CYCLE_GC 1
 #endif
 
+#ifdef __LP64__
+#undef __LP64__
+#endif
+
+
 #include <limits.h>
 
 #ifndef UCHAR_MAX
diff --git a/Include/pyport.h b/Include/pyport.h
index 0c78a1e..bf98141 100644
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -884,6 +884,9 @@ typedef struct fd_set {
 
 #ifndef LONG_BIT
 #define LONG_BIT (8 * SIZEOF_LONG)
+#else
+#undef LONG_BIT 
+#define LONG_BIT (8 * SIZEOF_LONG)
 #endif
 
 #if LONG_BIT != 8 * SIZEOF_LONG
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 2baf920..d7831f5 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -3991,7 +3991,7 @@ posix_openpty(PyObject *self, PyObject *noargs)
     slave_fd = open(slave_name, O_RDWR | O_NOCTTY); /* open slave */
     if (slave_fd < 0)
         return posix_error();
-#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC)
+#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC) && !defined(__ANDROID_API__)
     ioctl(slave_fd, I_PUSH, "ptem"); /* push ptem */
     ioctl(slave_fd, I_PUSH, "ldterm"); /* push ldterm */
 #ifndef __hpux
diff --git a/configure.ac b/configure.ac
index 913d546..dfa04d1 100644
--- a/configure.ac
+++ b/configure.ac
@@ -334,6 +334,9 @@ then
        # `define_xopen_source' in the case statement below. For the
        # current supported cross builds, this macro is not adjusted.
 	case "$host" in
+    *-*-linux-android*)
+        ac_sys_system=Linux-android
+        ;;   
 	*-*-linux*)
 		ac_sys_system=Linux
 		;;
@@ -717,6 +720,35 @@ AC_SUBST(MULTIARCH)
 # checks for UNIX variants that set C preprocessor variables
 AC_USE_SYSTEM_EXTENSIONS
 
+AC_MSG_CHECKING([for the Android API level])
+cat >> conftest.c <<EOF
+#ifdef __ANDROID__
+#include <android/api-level.h>
+android_api = __ANDROID_API__
+arm_arch = __ARM_ARCH
+#else
+#error not Android
+#endif
+EOF
+
+if $CPP $CPPFLAGS conftest.c >conftest.out 2>/dev/null; then 
+  ANDROID_API_LEVEL=`sed -n -e '/__ANDROID_API__/d' -e 's/^android_api = //p' conftest.out`
+  _arm_arch=`sed -n -e '/__ARM_ARCH/d' -e 's/^arm_arch = //p' conftest.out`
+  AC_MSG_RESULT([$ANDROID_API_LEVEL])
+  AC_DEFINE_UNQUOTED(ANDROID_API_LEVEL, $ANDROID_API_LEVEL, [The Android API level.])
+  AC_DEFINE_UNQUOTED(__ANDROID__, 21, [The Android flag.])
+
+  AC_MSG_CHECKING([for the Android arm ABI])
+  AC_MSG_RESULT([$_arm_arch])
+  if test "$_arm_arch" = 7; then 
+    BASECFLAGS="${BASECFLAGS} -mfloat-abi=softfp -mfpu=vfpv3-d16"
+    LDFLAGS="${LDFLAGS} -march=armv7-a "
+  fi
+else
+  AC_MSG_RESULT([not Android])
+fi
+rm -f conftest.c conftest.out
+
 # Check for unsupported systems
 case $ac_sys_system/$ac_sys_release in
 atheos*|Linux*/1*)
@@ -1723,9 +1755,9 @@ dnl AC_MSG_RESULT($cpp_type)
 AC_HEADER_STDC
 AC_CHECK_HEADERS(asm/types.h crypt.h conio.h direct.h dlfcn.h errno.h \
 fcntl.h grp.h \
-ieeefp.h io.h langinfo.h libintl.h poll.h process.h pthread.h \
+ieeefp.h io.h libintl.h poll.h process.h pthread.h \
 shadow.h signal.h stdint.h stropts.h termios.h thread.h \
-unistd.h utime.h \
+unistd.h utime.h \
 sys/audioio.h sys/bsdtty.h sys/epoll.h sys/event.h sys/file.h sys/loadavg.h \
 sys/lock.h sys/mkdev.h sys/modem.h \
 sys/param.h sys/poll.h sys/random.h sys/select.h sys/socket.h sys/statvfs.h sys/stat.h \
@@ -1843,17 +1875,17 @@ AC_CHECK_TYPE(uint32_t,
   AC_DEFINE(HAVE_UINT32_T, 1, [Define if your compiler provides uint32_t.]),,)
 AC_TYPE_UINT32_T
 
-AC_CHECK_TYPE(uint64_t,
-  AC_DEFINE(HAVE_UINT64_T, 1, [Define if your compiler provides uint64_t.]),,)
-AC_TYPE_UINT64_T
+AC_CHECK_TYPE(uint64_t,
+  AC_DEFINE(HAVE_UINT64_T, 1, [Define if your compiler provides uint64_t.]),,)
+AC_TYPE_UINT64_T
 
 AC_CHECK_TYPE(int32_t,
   AC_DEFINE(HAVE_INT32_T, 1, [Define if your compiler provides int32_t.]),,)
 AC_TYPE_INT32_T
 
-AC_CHECK_TYPE(int64_t,
-  AC_DEFINE(HAVE_INT64_T, 1, [Define if your compiler provides int64_t.]),,)
-AC_TYPE_INT64_T
+AC_CHECK_TYPE(int64_t,
+  AC_DEFINE(HAVE_INT64_T, 1, [Define if your compiler provides int64_t.]),,)
+AC_TYPE_INT64_T
 
 AC_CHECK_TYPE(ssize_t,
   AC_DEFINE(HAVE_SSIZE_T, 1, [Define if your compiler provides ssize_t]),,)
@@ -2305,6 +2337,7 @@ then
 		 then CCSHARED="-fPIC";
 		 else CCSHARED="+z";
 		 fi;;
+    Linux-android*) ;;
 	Linux*|GNU*) CCSHARED="-fPIC";;
 	BSD/OS*/4*) CCSHARED="-fpic";;
 	FreeBSD*|NetBSD*|OpenBSD*|DragonFly*) CCSHARED="-fPIC";;
@@ -2337,6 +2370,7 @@ then
 	    LINKFORSHARED="-Wl,-E -Wl,+s";;
 #	    LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
 	BSD/OS/4*) LINKFORSHARED="-Xlinker -export-dynamic";;
+    Linux-android*) LINKFORSHARED="-pie -Xlinker -export-dynamic";;
 	Linux*|GNU*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	# -u libsys_s pulls in all symbols in libsys
 	Darwin/*) 
@@ -3378,7 +3412,7 @@ AC_CHECK_FUNCS(forkpty,,
 AC_CHECK_FUNCS(memmove)
 
 # check for long file support functions
-AC_CHECK_FUNCS(fseek64 fseeko fstatvfs ftell64 ftello statvfs)
+AC_CHECK_FUNCS(fseek64 fstatvfs ftell64 ftello statvfs)
 
 AC_REPLACE_FUNCS(dup2 getcwd strdup)
 AC_CHECK_FUNCS(getpgrp, 
@@ -3853,9 +3887,10 @@ int main() {
 AC_MSG_RESULT($ac_cv_little_endian_double)
 if test "$ac_cv_little_endian_double" = yes
 then
-  AC_DEFINE(DOUBLE_IS_LITTLE_ENDIAN_IEEE754, 1,
-  [Define if C doubles are 64-bit IEEE 754 binary format, stored
-   with the least significant byte first])
+  P=
+  #AC_DEFINE(DOUBLE_IS_LITTLE_ENDIAN_IEEE754, 1,
+  #[Define if C doubles are 64-bit IEEE 754 binary format, stored
+  # with the least significant byte first])
 fi
 
 AC_MSG_CHECKING(whether C doubles are big-endian IEEE 754 binary64)
@@ -3876,9 +3911,10 @@ int main() {
 AC_MSG_RESULT($ac_cv_big_endian_double)
 if test "$ac_cv_big_endian_double" = yes
 then
-  AC_DEFINE(DOUBLE_IS_BIG_ENDIAN_IEEE754, 1,
-  [Define if C doubles are 64-bit IEEE 754 binary format, stored
-   with the most significant byte first])
+  P=
+  #AC_DEFINE(DOUBLE_IS_BIG_ENDIAN_IEEE754, 1,
+  #[Define if C doubles are 64-bit IEEE 754 binary format, stored
+  # with the most significant byte first])
 fi
 
 # Some ARM platforms use a mixed-endian representation for doubles.
@@ -3903,9 +3939,10 @@ int main() {
 AC_MSG_RESULT($ac_cv_mixed_endian_double)
 if test "$ac_cv_mixed_endian_double" = yes
 then
-  AC_DEFINE(DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754, 1,
-  [Define if C doubles are 64-bit IEEE 754 binary format, stored
-   in ARM mixed-endian order (byte order 45670123)])
+  P=
+  #AC_DEFINE(DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754, 1,
+  #[Define if C doubles are 64-bit IEEE 754 binary format, stored
+  # in ARM mixed-endian order (byte order 45670123)])
 fi
 
 # The short float repr introduced in Python 3.1 requires the
-- 
2.7.4

